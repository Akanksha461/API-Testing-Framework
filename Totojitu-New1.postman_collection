{
	"variables": [],
	"info": {
		"name": "Totojitu-New1",
		"_postman_id": "6b779fb1-8cda-4687-59e4-315e20f2f4a0",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "GET/POSTMAN",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"postman.setGlobalVariable('postmanBDD', responseBody);"
						]
					}
				}
			],
			"request": {
				"url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "wrong_credentials_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(400); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in Html format',()=>{",
							"      response.should.be.html;",
							"    });",
							"    it('should be an error response', () => {      ",
							"        response.error.should.be.true; ",
							"    });  ",
							"    it(\"doesn't return a HTTP 200 code\",()=>{   ",
							"        response.should.not.have.status(200); ",
							"    });",
							"    it(\"doesn't send a OK response\",()=>{      ",
							"         response.ok.should.be.false;    ",
							"         ",
							"    });",
							"    it(\"should return a client error\",()=>{  ",
							"         response.clientError.should.be.true;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"should return a 4xx status code\",()=>{  ",
							"        response.statusType.should.equal(4);",
							"    });",
							"    ",
							"});",
							"//header asserstion",
							"describe('check for header block',()=>{",
							"    ",
							"    it('content type shpuld be apllication/json',()=>{",
							"        response.should.have.header('Content-Type', 'text/html; charset=utf-8');",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"});",
							"",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    it('response body should be in html format',()=>{",
							"      response.should.be.html;",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/admin/login/",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"rav\",\n\t\"password\":\"gyjghj\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Totojitu-Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access_token\",jsonData.token);",
							"",
							"eval(globals.postmanBDD);",
							"",
							"describe('Checks for my response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200);",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							"    // it('response should be an array',()=>{",
							"    //   response.body.should.be.an('array').and.not.empty;",
							"    // });",
							"    ",
							"    ",
							"});",
							"",
							"describe('check for header block',()=>{",
							"    ",
							"    it('content type shpuld be apllication/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    ",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/admin/login/",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"ravi\",\n\t\"password\":\"ravi123\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "bankserverstatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    ",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"     it('response body should be online',()=>{",
							"            response.body[0].should.equal('online');",
							"     });",
							"     it('response body should be offline',()=>{",
							"            response.body[1].should.equal('offline');",
							"     });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/bank/bankserverstatus",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Totojitu-GetMarket",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"singapore\",jsonData.result[0]._id);",
							"postman.setGlobalVariable(\"Combodia\",jsonData.result[1]._id);",
							"postman.setGlobalVariable(\"Hongkong\",jsonData.result[2]._id);",
							"postman.setGlobalVariable(\"Taiwan\",jsonData.result[3]._id);",
							"postman.setGlobalVariable(\"China\",jsonData.result[4]._id);",
							"postman.setGlobalVariable(\"Sydney\",jsonData.result[5]._id);",
							"// postman.setGlobalVariable(\"variable_key\", \"variable_value\");",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    ",
							"    //('returns a JSON object with a message key',()=>{",
							"           //esponse.body.should.be.an('object').with.keys(['message']);",
							"           //);",
							"    //('asserts actual message body',()=>{",
							"                //sponse.body.message.should.equal('Authentication failed. Wrong password.');",
							"                //;",
							"});",
							"",
							"// body asserstion",
							"function abc(response,index)",
							"    {",
							"        market=response.body.result[index];",
							"        return market;",
							"    }",
							" it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"",
							"describe('checks for the Singapore',()=>{",
							"    var market1 =abc(response,0);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"        }); ",
							"    it('Returns id of singapore',()=>{",
							"        market1._id.should.equal(globals.singapore);",
							"    });",
							"    it('returns Singapore as first market',()=>{",
							"        market1.name.should.equal('Singapore');",
							"    });",
							"    it('returns code as s1',()=>{",
							"        market1.code.should.not.empty;",
							"        market1.code.should.be.string;",
							"    });",
							"    it('returns singapore link',()=>{",
							"        market1.link.should.not.empty;",
							"        market1.link.should.be.string;",
							"    });",
							"    it('returns market closing time',()=>{",
							"        market1.closingTime.should.not.be.null;",
							"    });",
							"    it('returns market opening time',()=>{",
							"        market1.openingTime.should.not.be.null;",
							"    });",
							"    it('returns market image url',()=>{",
							"        market1.image.should.not.be.null;",
							"    });",
							"    it('returns market status',()=>{",
							"        market1.status.should.not.be.null;",
							"    });",
							"    it('returns market server status',()=>{",
							"        market1.serverStatus.should.not.be.null;",
							"        ",
							"        });  ",
							"});",
							"describe('checks for the Combodia',()=>{",
							"       var market2= abc(response,1);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"        }); ",
							"    it('Returns id of Combodia',()=>{",
							"        market2._id.should.equal(globals.Combodia);",
							"    });",
							"    it('returns Combodia as second market',()=>{ ",
							"        market2.name.should.equal('Combodia');",
							"      });",
							"      it('returns code ',()=>{",
							"        market2.code.should.not.be.null;",
							"      });",
							"      it('returns  link',()=>{",
							"        market2.link.should.should.not.be.null;",
							"      });",
							"       it('returns market closing time',()=>{",
							"        market2.closingTime.should.not.be.null;",
							"       });",
							"       it('returns market opening time',()=>{",
							"        market2.openingTime.should.not.be.null;",
							"       });",
							"       it('returns market image url',()=>{",
							"        market2.image.should.not.be.null;",
							"        ",
							"       });",
							"       it('returns market status',()=>{",
							"        market2.status.should.not.be.null;",
							"       });",
							"        it('returns market server status',()=>{",
							"        market2.serverStatus.should.not.be.null;",
							"        });",
							"        ",
							"      });",
							"      ",
							"describe('checks for the Hongkong',()=>{",
							"       var market3= abc(response,2);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"    }); ",
							"    it('Returns id of Hongkong',()=>{",
							"        market3._id.should.equal(globals.Hongkong);",
							"    });",
							"    it('returns Hongkong as third market',()=>{ ",
							"        market3.name.should.equal('Hongkong');",
							"    });",
							"    it('returns code ',()=>{",
							"        market3.code.should.not.be.null;",
							"    });",
							"    it('returns  link',()=>{",
							"        market3.link.should.not.be.null;",
							"    });",
							"    it('returns market closing time',()=>{",
							"        market3.closingTime.should.not.be.null;",
							"    });",
							"    it('returns market opening time',()=>{",
							"        market3.openingTime.should.not.be.null;",
							"    });",
							"    it('returns market image url',()=>{",
							"        market3.image.should.not.be.null;",
							"        ",
							"    });",
							"    it('returns market status',()=>{",
							"        market3.status.should.not.be.null;",
							"    });",
							"    it('returns market server status',()=>{",
							"        market3.serverStatus.should.not.be.null;",
							"    });",
							"        ",
							"      });",
							"describe('checks for the Taiwan',()=>{",
							"       var market4= abc(response,3);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"        }); ",
							"    it('Returns id of Taiwan',()=>{",
							"        market4._id.should.equal(globals.Taiwan);",
							"    });    ",
							"    it('returns Taiwan as fourth market',()=>{ ",
							"        market4.name.should.equal('Taiwan');",
							"    });",
							"      it('returns code ',()=>{",
							"        market4.code.should.not.be.null;",
							"      });",
							"      it('returns  link',()=>{",
							"        market4.link.should.not.be.null;",
							"      });",
							"       it('returns market closing time',()=>{",
							"        market4.closingTime.should.not.be.null;",
							"       });",
							"       it('returns market opening time',()=>{",
							"        market4.openingTime.should.not.be.null;",
							"       });",
							"       it('returns market image url',()=>{",
							"        market4.image.should.not.be.null;",
							"       });",
							"       it('returns market status',()=>{",
							"        market4.status.should.not.be.null;",
							"       });",
							"        it('returns market server status',()=>{",
							"        market4.serverStatus.should.not.be.null;",
							"        });",
							"        ",
							"      });",
							"describe('checks for the China',()=>{",
							"       var market5= abc(response,4);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"        }); ",
							"    it('Returns id of China',()=>{",
							"        market5._id.should.equal(globals.China);",
							"    });",
							"    it('returns China as fourth market',()=>{ ",
							"        market5.name.should.equal('China');",
							"    });",
							"      it('returns code ',()=>{",
							"        market5.code.should.not.be.null;",
							"      });",
							"      it('returns  link',()=>{",
							"        market5.link.should.not.be.null;",
							"      });",
							"       it('returns market closing time',()=>{",
							"        market5.closingTime.should.not.be.null;",
							"       });",
							"       it('returns market opening time',()=>{",
							"        market5.openingTime.should.not.be.null;",
							"       });",
							"       it('returns market image url',()=>{",
							"        market5.image.should.not.be.null;",
							"       });",
							"       it('returns market status',()=>{",
							"        market5.status.should.not.be.null;",
							"       });",
							"        it('returns market server status',()=>{",
							"        market5.serverStatus.should.not.be.null;",
							"        });",
							"        ",
							"      });",
							"describe('checks for the Sydney',()=>{",
							"       var market6= abc(response,5);",
							"    it('has result as an array',()=>{",
							"        response.body.result.should.be.an('array');",
							"        }); ",
							"    it('Returns id of Sydney',()=>{",
							"        market6._id.should.equal(globals.Sydney);",
							"    });   ",
							"     it('returns Sydney as fourth market',()=>{ ",
							"        market6.name.should.equal('Sydney');",
							"      });",
							"      it('returns code ',()=>{",
							"        market6.code.should.not.be.null;",
							"      });",
							"      it('returns  link',()=>{",
							"        market6.link.should.not.be.null;",
							"      });",
							"       it('returns market closing time',()=>{",
							"        market6.closingTime.should.not.be.null;",
							"       });",
							"       it('returns market opening time',()=>{",
							"        market6.openingTime.should.not.be.null;",
							"       });",
							"       it('returns market image url',()=>{",
							"        market6.image.should.not.be.null;",
							"       });",
							"       it('returns market status',()=>{",
							"        market6.status.should.not.be.null;",
							"       });",
							"        it('returns market server status',()=>{",
							"        market6.serverStatus.should.not.be.null;",
							"        });",
							"        ",
							"      });",
							"     "
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/market/getmarketlist",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "fullgamelist",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"fourD\",\"586246aa586a2a1b34da2722\");",
							"// postman.setGlobalVariable(\"gvgv\",jsonData.body[0]._id);",
							"postman.setGlobalVariable(\"threeD\",\"586246aa586a2a1b34da2723\");",
							"postman.setGlobalVariable(\"twoD\",\"586246aa586a2a1b34da2724\");",
							"postman.setGlobalVariable(\"twoD_Depan\",\"586246aa586a2a1b34da2725\");",
							"postman.setGlobalVariable(\"twoD_Tengah\",\"586246aa586a2a1b34da2726\");",
							"postman.setGlobalVariable(\"Colok_Bebas\",\"586246aa586a2a1b34da2727\");",
							"postman.setGlobalVariable(\"Colok_Bebas_twoD\",\"586246aa586a2a1b34da2728\");",
							"postman.setGlobalVariable(\"Colok_Naga\",\"586246aa586a2a1b34da2729\");",
							"postman.setGlobalVariable(\"Colok_Jitu\",\"586246aa586a2a1b34da272a\");",
							"postman.setGlobalVariable(\"Tengah\",\"586246aa586a2a1b34da272b\");",
							"postman.setGlobalVariable(\"Tengah\",\"586246aa586a2a1b34da272b\");",
							"postman.setGlobalVariable(\"Dasar\",\"586246aa586a2a1b34da272c\");",
							"postman.setGlobalVariable(\"fifty_fifty\",\"586246aa586a2a1b34da272d\");",
							"postman.setGlobalVariable(\"Shio\",\"586246aa586a2a1b34da272e\");",
							"postman.setGlobalVariable(\"Silang\",\"586246aa586a2a1b34da272f\");",
							"postman.setGlobalVariable(\"Kembang\",\"586246aa586a2a1b34da2730\");",
							"postman.setGlobalVariable(\"Kombinasi\",\"586246aa586a2a1b34da2731\");",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    it('response body for 4d game',()=>{",
							"        response.body[0]._id.should.equal(globals.fourD);",
							"        response.body[0].name.should.equal('4D');",
							"    });",
							"    it('response body for 3d game',()=>{",
							"        response.body[1]._id.should.equal(globals.threeD);",
							"        // market1._id.should.equal(globals.singapore);",
							"        response.body[1].name.should.equal('3D');",
							"    });",
							"      it('response body for 2d game',()=>{",
							"        response.body[2]._id.should.equal(globals.twoD);",
							"        response.body[2].name.should.equal('2D');",
							"    });",
							"    it('response body for 2D Depan game',()=>{",
							"        response.body[3]._id.should.equal(globals.twoD_Depan);",
							"        response.body[3].name.should.equal('2D Depan');",
							"    }); ",
							"    it('response body for 2D Tengah game',()=>{",
							"        response.body[4]._id.should.equal(globals.twoD_Tengah);",
							"        response.body[4].name.should.equal('2D Tengah');",
							"    });",
							"     it('response body for Colok Bebas game',()=>{",
							"        response.body[5]._id.should.equal(globals.Colok_Bebas);",
							"        response.body[5].name.should.equal('Colok Bebas');",
							"    }); ",
							"     it('response body for Colok Bebas 2D game',()=>{",
							"        response.body[6]._id.should.equal(globals.Colok_Bebas_twoD);",
							"        response.body[6].name.should.equal('Colok Bebas 2D');",
							"    });",
							"      it('response body for Colok Naga game',()=>{",
							"        response.body[7]._id.should.equal(globals.Colok_Naga);",
							"        response.body[7].name.should.equal('Colok Naga');",
							"    });  ",
							"    it('response body for Colok Jitu game',()=>{",
							"        response.body[8]._id.should.equal(globals.Colok_Jitu);",
							"        response.body[8].name.should.equal('Colok Jitu');",
							"    }); ",
							"     it('response body for Tengah game',()=>{",
							"        response.body[9]._id.should.equal(globals.Tengah);",
							"        response.body[9].name.should.equal('Tengah');",
							"    });",
							"    it('response body for Dasar game',()=>{",
							"        response.body[10]._id.should.equal(globals.Dasar);",
							"        response.body[10].name.should.equal('Dasar');",
							"    });",
							"    it('response body for 50-50 game',()=>{",
							"        response.body[11]._id.should.equal(globals.fifty_fifty);",
							"        response.body[11].name.should.equal('50-50');",
							"    });",
							"    it('response body for Shio game',()=>{",
							"        response.body[12]._id.should.equal(globals.Shio);",
							"        response.body[12].name.should.equal('Shio');",
							"    });",
							"    it('response body for Silang game',()=>{",
							"        response.body[13]._id.should.equal(globals.Silang);",
							"        response.body[13].name.should.equal('Silang');",
							"    });",
							"    it('response body for Kembang game',()=>{",
							"        response.body[14]._id.should.equal(globals.Kembang);",
							"        response.body[14].name.should.equal('Kembang');",
							"    });",
							"    it('response body for Kombinasi game',()=>{",
							"        response.body[15]._id.should.equal(globals.Kombinasi);",
							"        response.body[15].name.should.equal('Kombinasi');",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/games/fullgamelist",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "bankstatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    ",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"     it('response body should be active',()=>{",
							"            response.body[0].should.equal('active');",
							"     });",
							"     it('response body should be inactive',()=>{",
							"            response.body[1].should.equal('inactive');",
							"     });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/bank/bankstatus",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "assignorder",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"    ",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    it('response body should be 1',()=>{",
							"            response.body[0].should.equal(1);",
							"     });",
							"    it('response body should be 2',()=>{",
							"            response.body[1].should.equal(2);",
							"     });",
							"     it('response body should be 3',()=>{",
							"            response.body[2].should.equal(3);",
							"     });",
							"     it('response body should be 4',()=>{",
							"            response.body[3].should.equal(4);",
							"     });",
							"     it('response body should be 5',()=>{",
							"            response.body[4].should.equal(5);",
							"     });",
							"     it('response body should be 6',()=>{",
							"            response.body[5].should.equal(6);",
							"     });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/market/assignorder",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getshiotebak",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// postman.setGlobalVariable(\"variable_key\", \"variable_value\");",
							"eval(globals.postmanBDD);",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"    it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"    });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in JSON format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('response should have content length below 2000',()=>{",
							"    //   response.should.have.header('Content-Length','579');",
							"         let contentLength = parseInt(response.headers[\"content-length\"]);",
							"         contentLength.should.be.below(2000);",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"      response.should.have.header('ETag').and.not.empty; ",
							"    });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    ",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    it('check for id',()=>{",
							"        response.body._id.should.equal('58a552b94b76b763a468f29b');",
							"    });",
							"    it('check for first',()=>{",
							"        response.body.first.should.not.empty;",
							"        response.body.first.should.be.string;",
							"    });",
							"    it('check for second',()=>{",
							"        response.body.second.should.not.empty;",
							"        response.body.second.should.be.string;",
							"    });",
							"    it('check for third',()=>{",
							"        response.body.third.should.not.empty;",
							"        response.body.third.should.be.string;",
							"    });",
							"    it('Check for fourth shio',()=>{",
							"        response.body.fourth.should.not.empty;",
							"        response.body.fourth.should.be.string;",
							"    });",
							"    it('check for fifth shio',()=>{",
							"        response.body.fifth.should.not.empty;",
							"        response.body.fifth.should.be.string;",
							"    });",
							"    it('Check for sixth shio',()=>{",
							"        response.body.sixth.should.not.empty;",
							"        response.body.sixth.should.be.string;",
							"    });",
							"    it('Check for seventh shio',()=>{",
							"        response.body.seventh.should.not.empty;",
							"        response.body.seventh.should.be.string;",
							"    });",
							"    it('check for eigth shio',()=>{",
							"        response.body.eighth.should.not.empty;",
							"        response.body.eighth.should.be.string;",
							"    });",
							"    it('check for nineth shio',()=>{",
							"        response.body.nineth.should.not.empty;",
							"        response.body.nineth.should.be.string;",
							"    });",
							"    it('check for tenth shio',()=>{",
							"        response.body.tenth.should.not.empty;",
							"        response.body.tenth.should.be.string;",
							"    });",
							"    it('check for eleventh shio',()=>{",
							"        response.body.eleventh.should.not.empty;",
							"        response.body.eleventh.should.be.string;",
							"    });",
							"    it('check for tenth shio',()=>{",
							"        response.body.twelefth.should.not.empty;",
							"        response.body.twelefth.should.be.string;",
							"    });",
							"    ",
							"        ",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/market/getshiotebak",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "editshiotebak",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in Html format',()=>{",
							"      response.should.be.html;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    ",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'text/html; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    // it('etag in response should not be empty',()=>{",
							"    //   response.should.have.header('ETag').and.not.empty; ",
							"    // });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"describe('checks for body',()=>{",
							"    it('response body should be in html format',()=>{",
							"      response.should.be.html;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    it('response body message should sucessfully updated',()=>{",
							"        response.body.should.be.equal('successfully updated');",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/market/editshiotebak",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n\"eighth\":\"Mouse\",\n\"eleventh\":\"Snake\",\n\"fifth\":\"Goat\",\n\"first\":\"Buffalo\",\n\"fourth\":\"Dragon\",\n\"nineth\":\"Pig\",\n\"second\":\"Chicken\",\n\"seventh\":\"Monkey\",\n\"sixth\":\"Horse\",\n\"tenth\":\"Rabbit\",\n\"third\":\"Dog\",\n\"twelefth\":\"Tiger\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getshiotebak after edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"eval(globals.postmanBDD);",
							"it('checking the value for second',()=>{",
							"     response.body.second.should.equal(globals.get1);",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/market/getshiotebak",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for singapore",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"",
							"    for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Storing the custom assertions in a Postman global variable",
							"// allows you to re-use them on subsequent requests",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"",
							"/**",
							" * For more information about creating custom Chai.js assertions, see",
							" * http://chaijs.com/guide/plugins/#composing-an-assertion",
							" * ",
							" * @param {object} chai - The Chai.js library",
							" * @param {object} util - Chai.js utility functions for writing custom assertions",
							" */",
							"function myCustomAssertions (chai, util) {",
							"",
							"    // This is a simple assertion that checks whether a value is a date/time string",
							"    // (e.g. \"1947-07-01 06:35:55\")",
							"    chai.Assertion.addProperty('dateString', function () {",
							"        var dateStringPattern = /^\\d{4}-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d$/;",
							"",
							"        this.assert(",
							"            dateStringPattern.test(this._obj),",
							"            'expected #{act} to be a date/time string',",
							"            'expected #{act} not to be a date/time string'",
							"        );",
							"    });",
							"    ",
							"    ",
							"    // This assertion checks whether a value is a valid User resource.",
							"    // This is an example of defining custom API-specific assertions.",
							"    chai.Assertion.addMethod('userResource', function () {",
							"        var assertion = new chai.Assertion(this._obj);",
							"        util.transferFlags(this, assertion);",
							"        ",
							"        assertion.has.schema({",
							"           type: 'object',",
							"           required: ['id', 'name', 'gender', 'location', 'email', 'dob', 'phone', 'cell'],",
							"           properties: {",
							"               name: {",
							"                   type: 'object',",
							"                   required: ['title', 'first', 'last'],",
							"               },",
							"               gender: {",
							"                   type: 'string',",
							"                   enum: ['male', 'female'],",
							"               },",
							"               email: {",
							"                   type: 'string',",
							"                   minLength: 5,",
							"                   maxLength: 100,",
							"                   pattern: '^.+@example\\\\.com$',",
							"               }",
							"           }",
							"        });",
							"    });",
							"    ",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{singapore}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for Combodia}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"",
							"    for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{Combodia}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for Sydney",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"",
							"    for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{Sydney}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for China",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{China}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for Taiwan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"",
							"    for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{Taiwan}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "get-gift/giftinfo for Hongkong",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"    // it('id Should not be null',()=>{",
							"    //   response.body[0]._id.should.equal('58b120aa79867d5208e2884d');",
							"    // });",
							"    // it('id Should not be null',()=>{",
							"    //     response.body[0].game._id.should.equal('586246aa586a2a1b34da2722');",
							"    // });",
							"",
							"    for(var i=0; i<response.body.length; i++){",
							"        describe('checks of gift for all games',()=>{",
							"            var g = response.body[i];",
							"            it('checks for id',()=>{",
							"                g._id.should.not.empty;",
							"               ",
							"            });",
							"            it('checks for games',()=>{",
							"                 g.game._id.should.not.empty;",
							"                 g.game.name.should.not.empty;",
							"            });",
							"            it('checks for gifts',()=>{",
							"                g.gift[0].name.should.not.empty;",
							"                g.gift[0]._id.should.not.empty;",
							"                g.gift[0].value.should.not.be.null;",
							"                g.gift[0].multipleTypeDiscount.should.not.be.null;",
							"                // g.gift[0].multipleTypeDiscount.should.equal(true);",
							"                // // g.gift[0].multipleTypeDiscount.should.equal(false);",
							"            });",
							"        });",
							" ",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/gift/giftinfo/{{Hongkong}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for singapore",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Tengah);",
							"            demo9.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Dasar);",
							"            demo10.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.fifty_fifty);",
							"            demo11.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.Colok_Jitu);",
							"            demo12.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Silang);",
							"            demo13.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Kembang);",
							"            demo14.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kombinasi);",
							"            demo15.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Shio);",
							"            demo16.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{singapore}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for Combodia",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Colok_Jitu);",
							"            demo9.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Tengah);",
							"            demo10.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.Dasar);",
							"            demo11.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.fifty_fifty);",
							"            demo12.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Shio);",
							"            demo13.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Silang);",
							"            demo14.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kembang);",
							"            demo15.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Kombinasi);",
							"            demo16.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{Combodia}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for Sydney",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Colok_Jitu);",
							"            demo9.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Tengah);",
							"            demo10.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.Dasar);",
							"            demo11.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.fifty_fifty);",
							"            demo12.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Shio);",
							"            demo13.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Silang);",
							"            demo14.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kembang);",
							"            demo15.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Kombinasi);",
							"            demo16.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{Sydney}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for China",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Colok_Jitu);",
							"            demo9.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Tengah);",
							"            demo10.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.Dasar);",
							"            demo11.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.fifty_fifty);",
							"            demo12.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Shio);",
							"            demo13.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Silang);",
							"            demo14.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kembang);",
							"            demo15.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Kombinasi);",
							"            demo16.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{China}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for Taiwan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Colok_Jitu);",
							"            demo9.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Tengah);",
							"            demo10.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.Dasar);",
							"            demo11.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.fifty_fifty);",
							"            demo12.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Shio);",
							"            demo13.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Silang);",
							"            demo14.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kembang);",
							"            demo15.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Kombinasi);",
							"            demo16.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{Taiwan}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "getdiscount for Hongkong",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(globals.postmanBDD);",
							"eval(globals.myCustomAssertions);",
							"// var jsonData = JSON.parse(responseBody);",
							"// postman.setGlobalVariable(\"get1\",jsonData.second);",
							"// Load the \"myCustomAssertions\" Chai.js plug-in that we defined in the previous request",
							"postman.setGlobalVariable('myCustomAssertions', myCustomAssertions);",
							"chai.use(myCustomAssertions);",
							"",
							"//response assertion",
							"describe('assertions for response',()=>{",
							"   it('checks response code',()=>{",
							"      response.should.have.status(200); ",
							"   });",
							"    it('checks response time',()=>{",
							"        response.time.should.be.below(1000);",
							"    });",
							"    ",
							"    it('response should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it(\"should not return a server error\",()=>{ ",
							"        response.serverError.should.be.false; ",
							"    });",
							"    it(\"Send a OK response\",()=>{      ",
							"      response.ok.should.be.true;    ",
							"    });",
							"    it('should not be an error response', () => {      ",
							"        response.error.should.be.false; ",
							"    });",
							" ",
							"});  ",
							"",
							"//assertions for headers",
							"describe('Checks for header',()=>{",
							"    it('access control allow origin should be \"*',()=>{",
							"        response.should.have.header('access-control-allow-origin',\"*\");",
							"    });",
							"    it('web server should support keep-alive connections',()=>{",
							"        response.should.have.header('Connection','keep-alive');",
							"    });",
							"    it('content encoding emcoding should be gzip',()=>{",
							"        response.should.have.header('Content-Encoding','gzip');",
							"    });",
							"    it('content type shpuld be application/json',()=>{",
							"        response.should.have.header('Content-Type', 'application/json; charset=utf-8');",
							"    });",
							"    it('Date should not be empty',()=>{",
							"        response.should.have.header('Date').and.not.empty; ",
							"    });",
							"    ",
							"    it('etag in response should not be empty',()=>{",
							"       response.should.have.header('ETag').and.not.empty; ",
							"     });",
							"    it('server should be nginx/1.4.6(ubuntu',()=>{",
							"        response.should.have.header('X-Powered-By','Express');",
							"    });",
							"    it('transfer-encoding should be chunked',()=>{",
							"        response.should.have.header('Transfer-Encoding','chunked');",
							"    });",
							"    it('vary should be Accept-Encoding',()=>{",
							"        response.should.have.header('Vary','Accept-Encoding');",
							"    });",
							"    it('X-Powered-By should be an Express',()=>{",
							"        response.should.have.header('X-Powered-By' ,'Express');",
							"    });",
							"});",
							"//body asserstion",
							"function abc(response, index)",
							"{",
							"   demo = response.body[index];",
							"    return demo;",
							"}",
							"",
							"describe('checks for body',()=>{",
							"    ",
							"    it('response body should be in json format',()=>{",
							"      response.should.be.json;",
							"    });",
							"    it('response body should not be empty',()=>{",
							"      response.body.should.and.not.empty; ",
							"    });",
							"    ",
							"    it('should return an array of users', () => {",
							"        response.body.should.be.an('array').with.length.at.least(1);",
							"    });",
							"});",
							"describe('it checks the discount for 4d',()=>{",
							"        var demo1 = abc(response, 0);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo1._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo1.game._id.should.equal(globals.fourD);",
							"            demo1.game.name.should.equal('4D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo1.discount.should.not.be.null;",
							"            // let level3 = parseInt(demo1.discount[\"level3\"]);",
							"            // level3.should.be.below(100);",
							"            ",
							"            // let level2 = parseInt(demo1.discount[\"level2\"]);",
							"            // level2.should.be.below(100);",
							"            ",
							"            // let level1 = parseInt(demo1.discount[\"level1\"]);",
							"            // level1.should.be.below(100);",
							"            ",
							"            // let level0 = parseInt(demo1.discount[\"level0\"]);",
							"            // level0.should.be.below(100);",
							"            ",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo1.discount.level3.should.be.above(0);",
							"            demo1.discount.level3.should.be.at.most(100);",
							"            demo1.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo1.discount.level2.should.be.above(0);",
							"            demo1.discount.level2.should.be.at.most(100);",
							"            demo1.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo1.discount.level1.should.be.above(0);",
							"            demo1.discount.level1.should.be.at.most(100);",
							"            demo1.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo1.discount.level0.should.be.above(0);",
							"            demo1.discount.level0.should.be.at.most(100);",
							"            demo1.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 3d',()=>{",
							"        var demo2 = abc(response, 1);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo2._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo2.game._id.should.equal(globals.threeD);",
							"            demo2.game.name.should.equal('3D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo2.discount.should.not.be.null;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo2.discount.level3.should.be.above(0);",
							"            demo2.discount.level3.should.be.at.most(100);",
							"            demo2.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo2.discount.level2.should.be.above(0);",
							"            demo2.discount.level2.should.be.at.most(100);",
							"            demo2.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo2.discount.level1.should.be.above(0);",
							"            demo2.discount.level1.should.be.at.most(100);",
							"            demo2.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo2.discount.level0.should.be.above(0);",
							"            demo2.discount.level0.should.be.at.most(100);",
							"            demo2.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2D',()=>{",
							"        var demo3 = abc(response, 2);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo3._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo3.game._id.should.equal(globals.twoD);",
							"            demo3.game.name.should.equal('2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo3.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo3.discount.level3.should.be.above(0);",
							"            demo3.discount.level3.should.be.at.most(100);",
							"            demo3.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo3.discount.level2.should.be.above(0);",
							"            demo3.discount.level2.should.be.at.most(100);",
							"            demo3.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo3.discount.level1.should.be.above(0);",
							"            demo3.discount.level1.should.be.at.most(100);",
							"            demo3.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo3.discount.level0.should.be.above(0);",
							"            demo3.discount.level0.should.be.at.most(100);",
							"            demo3.discount.level0.should.be.at.least(1);",
							"        });",
							"        ",
							"    ",
							"});",
							"describe('it checks the discount for 2d Depan',()=>{",
							"        var demo4 = abc(response, 3);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo4._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo4.game._id.should.equal(globals.twoD_Depan);",
							"            demo4.game.name.should.equal('2D Depan');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo4.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo4.discount.level3.should.be.above(0);",
							"            demo4.discount.level3.should.be.at.most(100);",
							"            demo4.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo4.discount.level2.should.be.above(0);",
							"            demo4.discount.level2.should.be.at.most(100);",
							"            demo4.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo4.discount.level1.should.be.above(0);",
							"            demo4.discount.level1.should.be.at.most(100);",
							"            demo4.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo4.discount.level0.should.be.above(0);",
							"            demo4.discount.level0.should.be.at.most(100);",
							"            demo4.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for 2D Tengah',()=>{",
							"        var demo5 = abc(response, 4);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo5._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo5.game._id.should.equal(globals.twoD_Tengah);",
							"            demo5.game.name.should.equal('2D Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo5.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo5.discount.level3.should.be.above(0);",
							"            demo5.discount.level3.should.be.at.most(100);",
							"            demo5.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo5.discount.level2.should.be.above(0);",
							"            demo5.discount.level2.should.be.at.most(100);",
							"            demo5.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo5.discount.level1.should.be.above(0);",
							"            demo5.discount.level1.should.be.at.most(100);",
							"            demo5.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo5.discount.level0.should.be.above(0);",
							"            demo5.discount.level0.should.be.at.most(100);",
							"            demo5.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});describe('it checks the discount for Colok Bebas',()=>{",
							"        var demo6 = abc(response, 5);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo6._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo6.game._id.should.equal(globals.Colok_Bebas);",
							"            demo6.game.name.should.equal('Colok Bebas');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo6.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo6.discount.level3.should.be.above(0);",
							"            demo6.discount.level3.should.be.at.most(100);",
							"            demo6.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo6.discount.level2.should.be.above(0);",
							"            demo6.discount.level2.should.be.at.most(100);",
							"            demo6.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo6.discount.level1.should.be.above(0);",
							"            demo6.discount.level1.should.be.at.most(100);",
							"            demo6.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo6.discount.level0.should.be.above(0);",
							"            demo6.discount.level0.should.be.at.most(100);",
							"            demo6.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Colok Bebas 2D',()=>{",
							"        var demo7 = abc(response, 6);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo7._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo7.game._id.should.equal(globals.Colok_Bebas_twoD);",
							"            demo7.game.name.should.equal('Colok Bebas 2D');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo7.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo7.discount.level3.should.be.above(0);",
							"            demo7.discount.level3.should.be.at.most(100);",
							"            demo7.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo7.discount.level2.should.be.above(0);",
							"            demo7.discount.level2.should.be.at.most(100);",
							"            demo7.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo7.discount.level1.should.be.above(0);",
							"            demo7.discount.level1.should.be.at.most(100);",
							"            demo7.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo7.discount.level0.should.be.above(0);",
							"            demo7.discount.level0.should.be.at.most(100);",
							"            demo7.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Naga',()=>{",
							"        var demo8 = abc(response, 7);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo8._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo8.game._id.should.equal(globals.Colok_Naga);",
							"            demo8.game.name.should.equal('Colok Naga');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo8.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo8.discount.level3.should.be.above(0);",
							"            demo8.discount.level3.should.be.at.most(100);",
							"            demo8.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo8.discount.level2.should.be.above(0);",
							"            demo8.discount.level2.should.be.at.most(100);",
							"            demo8.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo8.discount.level1.should.be.above(0);",
							"            demo8.discount.level1.should.be.at.most(100);",
							"            demo8.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo8.discount.level0.should.be.above(0);",
							"            demo8.discount.level0.should.be.at.most(100);",
							"            demo8.discount.level0.should.be.at.least(1);",
							"        });",
							"});",
							"describe('it checks the discount for Colok Jitu',()=>{",
							"        var demo9 = abc(response, 8);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo9._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo9.game._id.should.equal(globals.Colok_Jitu);",
							"            demo9.game.name.should.equal('Colok Jitu');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo9.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo9.discount.level3.should.be.above(0);",
							"            demo9.discount.level3.should.be.at.most(100);",
							"            demo9.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo9.discount.level2.should.be.above(0);",
							"            demo9.discount.level2.should.be.at.most(100);",
							"            demo9.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo9.discount.level1.should.be.above(0);",
							"            demo9.discount.level1.should.be.at.most(100);",
							"            demo9.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo9.discount.level0.should.be.above(0);",
							"            demo9.discount.level0.should.be.at.most(100);",
							"            demo9.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Tengah',()=>{",
							"        var demo10 = abc(response, 9);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo10._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo10.game._id.should.equal(globals.Tengah);",
							"            demo10.game.name.should.equal('Tengah');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo10.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo10.discount.level3.should.be.above(0);",
							"            demo10.discount.level3.should.be.at.most(100);",
							"            demo10.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo10.discount.level2.should.be.above(0);",
							"            demo10.discount.level2.should.be.at.most(100);",
							"            demo10.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo10.discount.level1.should.be.above(0);",
							"            demo10.discount.level1.should.be.at.most(100);",
							"            demo10.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo10.discount.level0.should.be.above(0);",
							"            demo10.discount.level0.should.be.at.most(100);",
							"            demo10.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Dasar',()=>{",
							"        var demo11 = abc(response, 10);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo11._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo11.game._id.should.equal(globals.Dasar);",
							"            demo11.game.name.should.equal('Dasar');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo11.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo11.discount.level3.should.be.above(0);",
							"            demo11.discount.level3.should.be.at.most(100);",
							"            demo11.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo11.discount.level2.should.be.above(0);",
							"            demo11.discount.level2.should.be.at.most(100);",
							"            demo11.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo11.discount.level1.should.be.above(0);",
							"            demo11.discount.level1.should.be.at.most(100);",
							"            demo11.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo11.discount.level0.should.be.above(0);",
							"            demo11.discount.level0.should.be.at.most(100);",
							"            demo11.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for 50-50',()=>{",
							"        var demo12 = abc(response, 11);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo12._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo12.game._id.should.equal(globals.fifty_fifty);",
							"            demo12.game.name.should.equal('50-50');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo12.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo12.discount.level3.should.be.above(0);",
							"            demo12.discount.level3.should.be.at.most(100);",
							"            demo12.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo12.discount.level2.should.be.above(0);",
							"            demo12.discount.level2.should.be.at.most(100);",
							"            demo12.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo12.discount.level1.should.be.above(0);",
							"            demo12.discount.level1.should.be.at.most(100);",
							"            demo12.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo12.discount.level0.should.be.above(0);",
							"            demo12.discount.level0.should.be.at.most(100);",
							"            demo12.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Shio',()=>{",
							"        var demo13 = abc(response, 12);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo13._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo13.game._id.should.equal(globals.Shio);",
							"            demo13.game.name.should.equal('Shio');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo13.discount.should.and.not.empty;",
							"        });",
							"            it('checks if the value of level 3 ',()=>{  ",
							"            demo13.discount.level3.should.be.above(0);",
							"            demo13.discount.level3.should.be.at.most(100);",
							"            demo13.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo13.discount.level2.should.be.above(0);",
							"            demo13.discount.level2.should.be.at.most(100);",
							"            demo13.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo13.discount.level1.should.be.above(0);",
							"            demo13.discount.level1.should.be.at.most(100);",
							"            demo13.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo13.discount.level0.should.be.above(0);",
							"            demo13.discount.level0.should.be.at.most(100);",
							"            demo13.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Silang',()=>{",
							"        var demo14 = abc(response, 13);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo14._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo14.game._id.should.equal(globals.Silang);",
							"            demo14.game.name.should.equal('Silang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo14.discount.should.and.not.empty;",
							"        });",
							"        it('checks if the value of level 3 ',()=>{  ",
							"            demo14.discount.level3.should.be.above(0);",
							"            demo14.discount.level3.should.be.at.most(100);",
							"            demo14.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo14.discount.level2.should.be.above(0);",
							"            demo14.discount.level2.should.be.at.most(100);",
							"            demo14.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo14.discount.level1.should.be.above(0);",
							"            demo14.discount.level1.should.be.at.most(100);",
							"            demo14.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo14.discount.level0.should.be.above(0);",
							"            demo14.discount.level0.should.be.at.most(100);",
							"            demo14.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							"describe('it checks the discount for Kembang',()=>{",
							"        var demo15 = abc(response, 14);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo15._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo15.game._id.should.equal(globals.Kembang);",
							"            demo15.game.name.should.equal('Kembang');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo15.discount.should.and.not.empty;",
							"        });",
							"         it('checks if the value of level 3 ',()=>{  ",
							"            demo15.discount.level3.should.be.above(0);",
							"            demo15.discount.level3.should.be.at.most(100);",
							"            demo15.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo15.discount.level2.should.be.above(0);",
							"            demo15.discount.level2.should.be.at.most(100);",
							"            demo15.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo15.discount.level1.should.be.above(0);",
							"            demo15.discount.level1.should.be.at.most(100);",
							"            demo15.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo15.discount.level0.should.be.above(0);",
							"            demo15.discount.level0.should.be.at.most(100);",
							"            demo15.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"});",
							"describe('it checks the discount for Kombinasi',()=>{",
							"        var demo16 = abc(response, 15);",
							"    // var game1 = abc(response, 0);",
							"    // var discount1 = abc(response,0);",
							"        it('it check id ',()=>{",
							"            demo16._id.should.not.empty;",
							"        });",
							"        it('it checks details of game',()=>{",
							"            demo16.game._id.should.equal(globals.Kombinasi);",
							"            demo16.game.name.should.equal('Kombinasi');",
							"        });",
							"        it('it check discount values',()=>{",
							"            demo16.discount.should.and.not.empty;",
							"        });",
							"          it('checks if the value of level 3 ',()=>{  ",
							"            demo16.discount.level3.should.be.above(0);",
							"            demo16.discount.level3.should.be.at.most(100);",
							"            demo16.discount.level3.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level2 ',()=>{  ",
							"            demo16.discount.level2.should.be.above(0);",
							"            demo16.discount.level2.should.be.at.most(100);",
							"            demo16.discount.level2.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level1 ',()=>{  ",
							"            demo16.discount.level1.should.be.above(0);",
							"            demo16.discount.level1.should.be.at.most(100);",
							"            demo16.discount.level1.should.be.at.least(1);",
							"        });",
							"        it('checks if the value of level0 ',()=>{  ",
							"            demo16.discount.level0.should.be.above(0);",
							"            demo16.discount.level0.should.be.at.most(100);",
							"            demo16.discount.level0.should.be.at.least(1);",
							"        });",
							"    ",
							"    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{base_url}}/api/v1/discount/getdiscount/{{Hongkong}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		}
	]
}